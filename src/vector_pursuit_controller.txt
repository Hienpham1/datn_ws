1. sudo apt install ros-jazzy-vector-pursuit-controller
2. tạo config/controller.yaml
controller_server:
  ros__parameters:
    use_sim_time: false

    controller_plugins: ["FollowPath"]

    FollowPath:
      plugin: "vector_pursuit_controller::VectorPursuitController"

      # === THÔNG SỐ ĐIỀU KHIỂN ===
      desired_linear_vel: 0.2       # tốc độ mong muốn
      lookahead_time: 1.5           # thời gian nhìn trước (gián tiếp ảnh hưởng khoảng nhìn trước)
      k: 0.5                        # hệ số điều chỉnh hướng

      # === GIỚI HẠN VẬN TỐC ===
      max_linear_velocity: 0.4
      max_angular_velocity: 1.0
      max_linear_accel: 0.75
      max_angular_accel: 2.5

      # === TF & ODOM ===
      odom_topic: "/odom_encoder"
      base_frame_id: "base_link"
      global_frame_id: "odom"
      transform_tolerance: 0.5

      # === TÙY CHỌN THÊM (bạn có thể bật nếu cần) ===
      use_collision_aware_velocity: false
      use_approach_velocity_scaling: false
      rotate_to_heading_angular_vel: 0.2

3. tạo launch chạy controller:
from launch import LaunchDescription
from launch_ros.actions import Node

def generate_launch_description():
    return LaunchDescription([
        Node(
            package='nav2_controller',
            executable='controller_server',
            name='controller_server',
            output='screen',
            parameters=['config/controller.yaml']
        )
    ])
4. chạy file launch 
ros2 launch your_package_name controller.launch.py

5. chạy 3 node có sẵn của tôi

6. chạy file tạo wp
đường thẳng 1m:
import rclpy
from rclpy.node import Node
from nav_msgs.msg import Path
from geometry_msgs.msg import PoseStamped, Quaternion
from std_msgs.msg import Int16MultiArray
import math
import time

def euler_to_quaternion(yaw):
    return Quaternion(
        x=0.0,
        y=0.0,
        z=math.sin(yaw / 2.0),
        w=math.cos(yaw / 2.0)
    )

class WaypointPublisher(Node):
    def __init__(self):
        super().__init__('waypoint_publisher')

        self.path_pub = self.create_publisher(Path, '/plan', 10)
        self.paint_pub = self.create_publisher(Int16MultiArray, '/topic_paint', 10)

        self.timer = self.create_timer(1.0, self.publish_path_once)
        self.path_sent = False

    def publish_path_once(self):
        if self.path_sent:
            return

        path_msg = Path()
        path_msg.header.frame_id = "odom"
        path_msg.header.stamp = self.get_clock().now().to_msg()

        waypoints = []

        # 🟢 Đi đến điểm (1.0, 0.0)
        waypoints.append((1.0, 0.0, 0.0))

        # 🟢 Bật vẽ (sau 0.5s để robot ổn định tại điểm)
        self.create_timer(0.5, lambda: self.paint_pub.publish(Int16MultiArray(data=[1])))

        # 🟢 Đi tiếp đến (2.0, 0.0)
        waypoints.append((2.0, 0.0, 0.0))

        # 🟢 Tắt vẽ (sau khoảng 3 giây từ khi bắt đầu)
        self.create_timer(3.0, lambda: self.paint_pub.publish(Int16MultiArray(data=[0])))

        for x, y, yaw in waypoints:
            pose = PoseStamped()
            pose.header.frame_id = "odom"
            pose.header.stamp = path_msg.header.stamp
            pose.pose.position.x = x
            pose.pose.position.y = y
            pose.pose.orientation = euler_to_quaternion(yaw)
            path_msg.poses.append(pose)

        self.path_pub.publish(path_msg)
        self.get_logger().info(f"Đã gửi đường đi từ (1.0, 0.0) → (2.0, 0.0) kèm bật vẽ.")
        self.path_sent = True

def main(args=None):
    rclpy.init(args=args)
    node = WaypointPublisher()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

